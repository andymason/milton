(() => {
  let __propertyIsEnumerable = Object.propertyIsEnumerable;
  let __assign = Object.assign;
  let __commonJS = (callback) => {
    let module;
    return () => {
      if (!module) {
        module = {
          exports: {}
        };
        callback(module.exports, module);
      }
      return module.exports;
    };
  };

  // src/index.tsx
  var require_index = __commonJS(() => {
    function genRandomUid() {
      const rnd = Math.random();
      const uid = rnd.toString().substr(2);
      return `f2h-${uid}`;
    }
    async function getFrameSvgAsString(frame) {
      const svgBuff = await frame.exportAsync({
        format: "SVG",
        svgOutlineText: false,
        svgSimplifyStroke: true
      });
      return String.fromCharCode.apply(null, Array.from(svgBuff));
    }
    const handleReceivedMsg = (msg) => {
      const {type, width, height, frameId} = msg;
      switch (type) {
        case MSG_EVENTS.ERROR:
          console.log("plugin msg: error");
          break;
        case MSG_EVENTS.CLOSE:
          console.log("plugin msg: close");
          figma.closePlugin();
          break;
        case MSG_EVENTS.DOM_READY:
          console.log("plugin msg: DOM READY");
          main();
          break;
        case MSG_EVENTS.RENDER:
          console.log("plugin msg: render", frameId);
          renderFrame(frameId).then((svgStr) => {
            figma.ui.postMessage({
              type: MSG_EVENTS.RENDER,
              frameId,
              svgStr
            });
          }).catch((err) => {
            figma.ui.postMessage({
              type: MSG_EVENTS.ERROR,
              errorText: `Render failed: ${err != null ? err : err.message}`
            });
          });
          break;
        case MSG_EVENTS.RESIZE:
          console.log("plugin msg: resize");
          figma.ui.resize(width, height);
          break;
        default:
          console.error("Unknown post message", msg);
      }
    };
    figma.ui.on("message", (e) => handleReceivedMsg(e));
    const main = () => {
      const {currentPage} = figma;
      const allFrames = currentPage.children.filter((node) => node.type === "FRAME");
      const breakpoints = Object.keys(BREAKPOINTS).map((name) => name.toLowerCase());
      if (allFrames.length > 0) {
        const framesData = {};
        allFrames.forEach((frame) => {
          const {name, width, height, id} = frame;
          const textNodes = getTextNodes(frame);
          const isSelected = breakpoints.includes(id);
          const uid = genRandomUid();
          framesData[id] = {
            name,
            width,
            height,
            id,
            textNodes,
            uid,
            responsive: false,
            selected: isSelected
          };
        });
        figma.ui.postMessage({
          type: MSG_EVENTS.FOUND_FRAMES,
          frames: framesData
        });
        return;
      }
      if (allFrames.length < 1) {
        console.warn("No frames");
        figma.ui.postMessage({
          type: MSG_EVENTS.NO_FRAMES
        });
        return;
      }
    };
    figma.showUI(__html__);
    figma.ui.resize(INITIAL_UI_SIZE.width, INITIAL_UI_SIZE.height);
    async function renderFrame(frameId) {
      const frame = figma.getNodeById(frameId);
      if (!frame || frame.type !== "FRAME") {
        throw new Error("Missing frame");
      }
      const svgStr = await getFrameSvgAsString(frame);
      return svgStr;
    }
    function getTextNodes(frame) {
      const textNodes = frame.findAll(({type}) => type === "TEXT");
      return textNodes.map((node) => {
        const {x, y, width, height, fontSize: fontSizeData, fontName, fills, characters} = node;
        const [fill] = fills;
        let colour = {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        };
        if (fill.type === "SOLID") {
          colour = __assign(__assign({}, colour), {
            a: fill.opacity || 1
          });
        }
        let fontSize = 16;
        if (fontSizeData !== figma.mixed) {
          fontSize = fontSizeData;
        }
        let fontFamily = "Arial";
        if (fontName !== figma.mixed) {
          fontFamily = fontName.family;
        }
        return {
          x,
          y,
          width,
          height,
          fontSize,
          fontFamily,
          colour,
          characters
        };
      });
    }
  });

  // src/constants.ts
  var STAGES;
  (function(STAGES2) {
    STAGES2[STAGES2["CHOOSE_FRAMES"] = 0] = "CHOOSE_FRAMES";
    STAGES2[STAGES2["PREVIEW_OUTPUT"] = 1] = "PREVIEW_OUTPUT";
    STAGES2[STAGES2["RESPONSIVE_PREVIEW"] = 2] = "RESPONSIVE_PREVIEW";
    STAGES2[STAGES2["SAVE_OUTPUT"] = 3] = "SAVE_OUTPUT";
  })(STAGES || (STAGES = {}));
  var MSG_EVENTS;
  (function(MSG_EVENTS2) {
    MSG_EVENTS2[MSG_EVENTS2["DOM_READY"] = 0] = "DOM_READY";
    MSG_EVENTS2[MSG_EVENTS2["NO_FRAMES"] = 1] = "NO_FRAMES";
    MSG_EVENTS2[MSG_EVENTS2["FOUND_FRAMES"] = 2] = "FOUND_FRAMES";
    MSG_EVENTS2[MSG_EVENTS2["RESIZE"] = 3] = "RESIZE";
    MSG_EVENTS2[MSG_EVENTS2["RENDER"] = 4] = "RENDER";
    MSG_EVENTS2[MSG_EVENTS2["CLOSE"] = 5] = "CLOSE";
    MSG_EVENTS2[MSG_EVENTS2["ERROR"] = 6] = "ERROR";
  })(MSG_EVENTS || (MSG_EVENTS = {}));
  var BREAKPOINTS;
  (function(BREAKPOINTS2) {
    BREAKPOINTS2[BREAKPOINTS2["Mobile"] = 340] = "Mobile";
    BREAKPOINTS2[BREAKPOINTS2["Tablet"] = 520] = "Tablet";
    BREAKPOINTS2[BREAKPOINTS2["Desktop"] = 1024] = "Desktop";
  })(BREAKPOINTS || (BREAKPOINTS = {}));
  var OUTPUT_FORMATS;
  (function(OUTPUT_FORMATS2) {
    OUTPUT_FORMATS2[OUTPUT_FORMATS2["INLINE"] = 0] = "INLINE";
    OUTPUT_FORMATS2[OUTPUT_FORMATS2["IFRAME"] = 1] = "IFRAME";
  })(OUTPUT_FORMATS || (OUTPUT_FORMATS = {}));
  const INITIAL_UI_SIZE = {
    width: 480,
    height: 500,
    maxWidth: 1200,
    maxHeight: 900,
    minWidth: 420,
    minHeight: 480
  };
  require_index();
})();
//# sourceMappingURL=data:application/json;base64,
