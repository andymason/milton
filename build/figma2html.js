(() => {
  let __assign = Object.assign;

  // src/constants.ts
  var STAGES;
  (function(STAGES2) {
    STAGES2[STAGES2["CHOOSE_FRAMES"] = 0] = "CHOOSE_FRAMES";
    STAGES2[STAGES2["PREVIEW_OUTPUT"] = 1] = "PREVIEW_OUTPUT";
    STAGES2[STAGES2["RESPONSIVE_PREVIEW"] = 2] = "RESPONSIVE_PREVIEW";
    STAGES2[STAGES2["SAVE_OUTPUT"] = 3] = "SAVE_OUTPUT";
  })(STAGES || (STAGES = {}));
  var MSG_EVENTS;
  (function(MSG_EVENTS2) {
    MSG_EVENTS2[MSG_EVENTS2["DOM_READY"] = 0] = "DOM_READY";
    MSG_EVENTS2[MSG_EVENTS2["NO_FRAMES"] = 1] = "NO_FRAMES";
    MSG_EVENTS2[MSG_EVENTS2["FOUND_FRAMES"] = 2] = "FOUND_FRAMES";
    MSG_EVENTS2[MSG_EVENTS2["RESIZE"] = 3] = "RESIZE";
    MSG_EVENTS2[MSG_EVENTS2["RENDER"] = 4] = "RENDER";
    MSG_EVENTS2[MSG_EVENTS2["CLOSE"] = 5] = "CLOSE";
    MSG_EVENTS2[MSG_EVENTS2["ERROR"] = 6] = "ERROR";
    MSG_EVENTS2[MSG_EVENTS2["UPDATE_HEADLINES"] = 7] = "UPDATE_HEADLINES";
    MSG_EVENTS2[MSG_EVENTS2["COMPRESS_IMAGE"] = 8] = "COMPRESS_IMAGE";
    MSG_EVENTS2[MSG_EVENTS2["COMPRESSED_IMAGE"] = 9] = "COMPRESSED_IMAGE";
  })(MSG_EVENTS || (MSG_EVENTS = {}));
  var OUTPUT_FORMATS;
  (function(OUTPUT_FORMATS2) {
    OUTPUT_FORMATS2[OUTPUT_FORMATS2["INLINE"] = 0] = "INLINE";
    OUTPUT_FORMATS2[OUTPUT_FORMATS2["IFRAME"] = 1] = "IFRAME";
  })(OUTPUT_FORMATS || (OUTPUT_FORMATS = {}));
  var HEADLINE_NODE_NAMES;
  (function(HEADLINE_NODE_NAMES2) {
    HEADLINE_NODE_NAMES2["HEADLINE"] = "headline";
    HEADLINE_NODE_NAMES2["SUBHEAD"] = "subhead";
    HEADLINE_NODE_NAMES2["SOURCE"] = "source";
  })(HEADLINE_NODE_NAMES || (HEADLINE_NODE_NAMES = {}));

  // src/index.tsx
  figma.ui.on("message", (e) => handleReceivedMsg(e));
  figma.showUI(__html__);
  const {width, height} = figma.viewport.bounds;
  const {zoom} = figma.viewport;
  const initialWindowWidth = Math.round(width * zoom);
  const initialWindowHeight = Math.round(height * zoom);
  figma.ui.resize(initialWindowWidth, initialWindowHeight);
  const compressionPool = [];
  function handleCompressedMsg(msg) {
    const {uid, image} = msg;
    const poolItemIndex = compressionPool.findIndex((item) => item.uid === uid);
    if (poolItemIndex > -1) {
      compressionPool[poolItemIndex].callback(image);
      clearTimeout(compressionPool[poolItemIndex].timeout);
      compressionPool.splice(poolItemIndex, 1);
    }
  }
  function getRootFrames() {
    const {currentPage} = figma;
    const rootFrames = currentPage.children.filter((node) => node.type === "FRAME");
    if (rootFrames.length < 1) {
      console.warn("No frames");
      figma.ui.postMessage({type: MSG_EVENTS.NO_FRAMES});
      return;
    }
    const headlinesAndSource = getHeadlinesAndSource(currentPage);
    const framesData = rootFrames.map((frame) => {
      const {name, width: width2, height: height2, id} = frame;
      const textNodes = getTextNodes(frame);
      return {
        name,
        width: width2,
        height: height2,
        id,
        textNodes,
        responsive: false,
        selected: true
      };
    });
    figma.ui.postMessage(__assign({
      type: MSG_EVENTS.FOUND_FRAMES,
      frames: framesData,
      windowWidth: initialWindowWidth,
      windowHeight: initialWindowHeight
    }, headlinesAndSource));
  }
  function compressImage(node) {
    const newFills = [];
    return new Promise((resolve, _reject) => {
      const fills = node.fills === figma.mixed ? [] : [...node.fills];
      Promise.all(fills.map(async (paint) => {
        if (paint.type === "IMAGE" && paint.imageHash) {
          const image = figma.getImageByHash(paint.imageHash);
          const imageBytes = await image.getBytesAsync();
          const uid = Math.random().toString(32);
          figma.ui.postMessage({
            type: MSG_EVENTS.COMPRESS_IMAGE,
            image: imageBytes,
            width: node.width,
            height: node.height,
            uid
          });
          await new Promise((res) => {
            const timeout = setTimeout(() => {
              _reject("Compress image response timed out.");
            }, 5e3);
            compressionPool.push({
              uid,
              callback: (image2) => {
                const newPaint = JSON.parse(JSON.stringify(paint));
                newPaint.imageHash = figma.createImage(image2).hash;
                newFills.push(newPaint);
                res();
              },
              timeout
            });
          });
        }
      })).then(() => {
        node.fills = newFills;
        resolve();
      });
    });
  }
  async function handleRender(frameId) {
    let clone;
    try {
      const frame = figma.getNodeById(frameId);
      if (!frame || frame.type !== "FRAME") {
        throw new Error("Missing frame");
      }
      clone = frame.clone();
      clone.name = `[temp] ${frame.name}`;
      const cloneTextNodes = clone.findChildren((node) => node.type === "TEXT");
      cloneTextNodes.forEach((node) => node.remove());
      const nodesWithPaintImages = clone.findChildren((node) => {
        if ("fills" in node && node.fills !== figma.mixed) {
          return node.fills.some((fill) => "imageHash" in fill);
        } else {
          return false;
        }
      });
      await Promise.all(nodesWithPaintImages.map(compressImage));
      if (nodesWithPaintImages.length > 0) {
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
      console.log("RENDERING SVG");
      const svg = await clone.exportAsync({
        format: "SVG",
        svgOutlineText: false,
        svgSimplifyStroke: true
      });
      figma.ui.postMessage({
        type: MSG_EVENTS.RENDER,
        frameId,
        svg
      });
    } catch (err) {
      figma.ui.postMessage({
        type: MSG_EVENTS.ERROR,
        errorText: `Render failed: ${err == null ? void 0 : err.message}`
      });
    } finally {
      console.warn("Inside render finallay");
      clone == null ? void 0 : clone.remove();
    }
  }
  function getTextNodes(frame) {
    const textNodes = frame.findAll(({type}) => type === "TEXT");
    const {absoluteTransform} = frame;
    const rootX = absoluteTransform[0][2];
    const rootY = absoluteTransform[1][2];
    return textNodes.map((node) => {
      const {absoluteTransform: absoluteTransform2, width: width2, height: height2, fontSize: fontSizeData, fontName, fills, characters, lineHeight, letterSpacing, textAlignHorizontal, textAlignVertical} = node;
      const textX = absoluteTransform2[0][2];
      const textY = absoluteTransform2[1][2];
      const x = textX - rootX;
      const y = textY - rootY;
      const [fill] = fills === figma.mixed ? [] : fills;
      let colour = {r: 0, g: 0, b: 0, a: 1};
      if (fill.type === "SOLID") {
        colour = __assign(__assign({}, colour), {a: fill.opacity || 1});
      }
      let fontSize = 16;
      if (fontSizeData !== figma.mixed) {
        fontSize = fontSizeData;
      }
      let fontFamily = "Arial";
      let fontStyle = "Regular";
      if (fontName !== figma.mixed) {
        fontFamily = fontName.family;
        fontStyle = fontName.style;
      }
      return {
        x,
        y,
        width: width2,
        height: height2,
        fontSize,
        fontFamily,
        fontStyle,
        colour,
        characters,
        lineHeight,
        letterSpacing,
        textAlignHorizontal,
        textAlignVertical
      };
    });
  }
  function getHeadlinesAndSource(pageNode) {
    const NODE_NAMES = ["headline", "subhead", "source"];
    const result = {};
    for (const name of NODE_NAMES) {
      const node = pageNode.findChild((node2) => node2.name === name && node2.type === "TEXT");
      result[name] = node == null ? void 0 : node.characters;
    }
    return result;
  }
  async function setHeadlinesAndSource(props) {
    const {pageNode} = props;
    const frames = pageNode.findChildren((node) => node.type === "FRAME");
    const mostLeftPos = Math.min(...frames.map((node) => node.x));
    const mostTopPos = Math.min(...frames.map((node) => node.y));
    Object.values(HEADLINE_NODE_NAMES).forEach(async (name) => {
      let node = pageNode.findChild((node2) => node2.name === name && node2.type === "TEXT");
      const textContent = props[name];
      if (!textContent) {
        if (node)
          node.remove();
        return;
      }
      if (!node) {
        node = figma.createText();
        node.name = name;
        let y = mostTopPos - 60;
        if (name === HEADLINE_NODE_NAMES.HEADLINE) {
          y -= 60;
        } else if (name === HEADLINE_NODE_NAMES.SUBHEAD) {
          y -= 30;
        }
        node.relativeTransform = [
          [1, 0, mostLeftPos],
          [0, 1, y]
        ];
      }
      node.locked = true;
      const fontName = node.fontName !== figma.mixed ? node.fontName.family : "Roboto";
      const fontStyle = node.fontName !== figma.mixed ? node.fontName.style : "Regular";
      await figma.loadFontAsync({family: fontName, style: fontStyle});
      node.characters = props[name] || "";
    });
  }
  function handleReceivedMsg(msg) {
    switch (msg.type) {
      case MSG_EVENTS.ERROR:
        console.log("plugin msg: error");
        break;
      case MSG_EVENTS.CLOSE:
        console.log("plugin msg: close");
        figma.closePlugin();
        break;
      case MSG_EVENTS.DOM_READY:
        console.log("plugin msg: DOM READY");
        getRootFrames();
        break;
      case MSG_EVENTS.RENDER:
        console.log("plugin msg: render", msg.frameId);
        handleRender(msg.frameId);
        break;
      case MSG_EVENTS.RESIZE:
        console.log("plugin msg: resize");
        figma.ui.resize(msg.width, msg.height);
        break;
      case MSG_EVENTS.UPDATE_HEADLINES:
        setHeadlinesAndSource({
          pageNode: figma.currentPage,
          headline: msg.headline,
          subhead: msg.subhead,
          source: msg.source
        });
        break;
      case MSG_EVENTS.COMPRESSED_IMAGE:
        handleCompressedMsg(msg);
        break;
      default:
        console.error("Unknown post message", msg);
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,
